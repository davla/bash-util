<?php use Maze\db\MySQLConn;require_once 'autoload.php';class DragonValeDB{ private static $instance=0; private static $getDragonsQuery=0; private static $breedingHintQuery=0; private static $allTimesQuery=0; private $conn=0; private function __construct(){$this->conn=new MySQLConn('localhost','dragonvale','dragonvale','dragonvale');} public function __destruct(){if(self::$getDragonsQuery)$this->conn->closeStmt(self::$getDragonsQuery,'getDragonsQuery');if(self::$breedingHintQuery)$this->conn->closeStmt(self::$breedingHintQuery,'breedingHintQuery');if(self::$allTimesQuery)$this->conn->closeStmt(self::$allTimesQuery,'allTimesQuery');} public static function getInstance(){if(!(self::$instance instanceof DragonvaleDB))self::$instance=new DragonvaleDB();return self::$instance;} public function getDragons($id,$time,$elem1,$elem2,$elem3,$elem4,$parent1,$parent2,$rowsCount,$startRow,$strictOrder=false,$reduced=false,$displayDays=false){if(!self::$getDragonsQuery)self::$getDragonsQuery=$this->conn->prepare('call getDragons(?,?,?,?,?,?,?,?,?,?,?,?,?)','getDragonsQuery');return $this->conn->prepQuery(MySQLConn::ASSOC,null,self::$getDragonsQuery,$id,$time,$elem1,$elem2,$elem3,$elem4,$parent1,$parent2,$rowsCount,$startRow,(int)$strictOrder,(int)$reduced,(int)$displayDays);} public function breedingHint($id,$reduced=false,$displayDays=false){if(!self::$breedingHintQuery)self::$breedingHintQuery=$this->conn->prepare('call breedingHint(?,?,?)','breedingHintQuery');$breedData=$this->conn->prepQuery(MySQLConn::ASSOC,function(&$dragon){$dragon['elems']=explode('-',$dragon['elems']);if(isset($dragon['breedElems']))$dragon['breedElems']=explode('-',$dragon['breedElems']);return $dragon;},self::$breedingHintQuery,$id,(int)$reduced,(int)$displayDays);$ids=array_column($breedData,'id');$result=$breedData[array_search($id,$ids)];if(isset($result['parent1']))$result['parent1']=$breedData[array_search($result['parent1'],$ids)];if(isset($result['parent2']))$result['parent2']=$breedData[array_search($result['parent2'],$ids)];unset($result['parent1']['parent1'],$result['parent1']['parent2'],$result['parent1']['breedElems'],$result['parent1']['notes'],$result['parent2']['parent1'],$result['parent2']['parent2'],$result['parent2']['breedElems'],$result['parent2']['notes']);return $result;} public function allNames(){return $this->conn->query(MySQLConn::ASSOC,null,'select id,en name from dragons order by en');} public function allElements(){return $this->conn->query(MySQLConn::NUMERIC,null,'select id,en from elements order by en');} public function allParents(){return $this->conn->query(MySQLConn::ASSOC,null,"select d.id,d.en name,getOppositeDragon(d.id) opposite from dragons d join canBreed cb on d.id=cb.id where cb.canBreed is true order by d.en");} public function allTimes($reduced=false,$displayDays=false){if(!self::$allTimesQuery)self::$allTimesQuery=$this->conn->prepare('select distinct time,formatTime(time,?,?) from dragons order by time','allTimesQuery');return $this->conn->prepQuery(MySQLConn::NUMERIC,null,self::$allTimesQuery,(int)$reduced,(int)$displayDays);}}
