<?php namespace Maze\db;require_once 'common.php';class MySQLConn{ protected $conn; public $error;const ASSOC=MYSQLI_ASSOC;const NUMERIC=MYSQLI_NUM; public function __construct($host='localhost',$username='root',$password='',$schema='',$charset='utf8mb4',$port=null,$socket=null){$this->conn=new \mysqli($host,$username,$password,$schema,$port,$socket);if($this->conn->connect_errno!=0)die("Connection to database failed due to: {$this->conn->connect_error}\n");if(!$this->conn->set_charset($charset))die("Failed to set charset $charset due to: {$this->conn->error}\n");$this->error=&$this->conn->error;} public function __destruct(){$this->conn->close();} public static function procResult($result,$type,$callback=null){if(!($result instanceof \mysqli_result))return $result;return array_map(!is_callable($callback)?'filterIsset':function($row)use ($callback){return $callback(filterIsset($row));},$result->fetch_all($type));} public function prepare($query,$name=null){$prepStmt=$this->conn->prepare($query);if(!$prepStmt&&isset($name))die("\$$name preparation failed due to: {$this->conn->error}\n");return $prepStmt;} public function closeStmt($stmt,$name){if(!$stmt->close())echo "\$$name closing failed due to: {$stmt->error}\n";} public function prepQuery($type,$callback,$prepStatement,...$params){$types=implode('',array_map(function($value){return gettype($value)[0];},$params));if(!$prepStatement->bind_param($types,...$params))die("Prepared statement binding failed\n");if(!$prepStatement->execute())die("Prepared statement execution failed due to: {$prepStatement->error}\n");if(!($result=$prepStatement->get_result()))die("Prepared statement result fetching failed due to: {$prepStatement->error}\n");return self::procResult($result,$type,$callback);} public function query($type,$callback,$query,...$params){if(count($params)>0){if(!($query=$this->conn->prepare($query)))die("Query failed due to: {$this->conn->error}\n");$result=$this->prepQuery($type,$callback,$query,...$params);if(!$query->close())echo "Prepared statement closing failed due to: {$query->error}\n";return $result;}else {if(!($result=$this->conn->query($query)))die("Query failed due to: {$this->conn->error}\n");return self::procResult($result,$type,$callback);}}}
