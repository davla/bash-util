#!/usr/bin/env bash

# This script installs the latest node.js version via nvm.
# Then it uninstalls all the unused node versions, that is
# all the installed ones that are not found in any .nvmrc
# file located in any non-node_modules directory under the
# home directory

#####################################################
#
#                   Variables
#
#####################################################

. "$HOME/.bashrc"
. "$NVM_DIR/nvm.sh"

USED_VERSIONS_FILE="$NVM_DIR/used_versions"

#####################################################
#
#                   Aliases
#
#####################################################

shopt -s expand_aliases

# Echoes normally if from terminal emulator, otherwise uses syslog
tty -s && alias print='echo' || alias print='logger'

# Removes any accessory character from version numbers in every
# line of input, eg. v2.4.3 -> 2.4.3
alias version-digits="tr -d 'v'"

#####################################################
#
#                   Functions
#
#####################################################

# Prints a log-like entry, adding the current date
# to the passed message
#
# Arguments:
#   - $1: The message to be logged.
function log {
    local MESSAGE="$1"

    print "$MESSAGE" on $(date +'%d-%m-%Y %T')
}

#####################################################
#
#               Interactive environment
#
#####################################################

# Checking for interactive environment, to effectively
# source ~/.bashrc. If don't have them rerunning this
# script in a bash interactive environment.
if ! grep '.*i.*' <<<"$-" &> /dev/null; then
    bash -i "$0"
    exit
fi

#####################################################
#
#           Updating node.js version
#
#####################################################

# Global packages are handled as defaults in $NVM_DIR/default-packages
nvm install node --latest-npm 2>&1 | grep 'already' &> /dev/null \
    && log 'Node-updater: node.js not updated' \
    || log 'Node-updater: node.js updated to '$(nvm version node)

#####################################################
#
#               Finding used versions
#
#####################################################

find "$HOME" -type f -name '.nvmrc' -not -path '*node_modules*' \
    -exec cat '{}' \+ | version-digits | sort -Vu > "$USED_VERSIONS_FILE"

#####################################################
#
#           Uninstalling unused versions
#
#####################################################

INSTALLED_VERSIONS=$(nvm ls | grep -v 'N/A' | grep -oP 'v\d\.\d\.\d' \
    | version-digits | sort -Vu)

for VERSION in $INSTALLED_VERSIONS; do
	if ! grep "$VERSION" "$USED_VERSIONS_FILE" &> /dev/null; then
        nvm uninstall "$VERSION" &> /dev/null \
            && log "Node-updater: uninstalled node.js version $VERSION"
    fi
done
exit 0
