#!/usr/bin/env bash

# This scripts defines the functions for the manual application installation
# machinery for move-to-monitor.

source /usr/local/lib/manual-install/lib.sh

#####################################################
#
#                   Variables
#
#####################################################

# GitHub repository name
REPO_URL='https://github.com/vanaoff/move-to-next-monitor.git'

# Executable file resulting from the installation
EXEC='/usr/local/bin/move-to-monitor'

#####################################################
#
#                   Functions
#
#####################################################

# This function exits with a zero status code if move-to-monitor is installed,
# non-zero otherwise.
function is-installed {
    [[ -f "$EXEC" ]]
}

# This function prints on STDOUT the last edit timestamp of move-to-monitor.
function installed-version {
    _latest-installed-timestamp "$EXEC"
}

# This function prints on STDOUT the timestamp of the latest master commit of
# the move-to-monitor GitHub repository.
function latest-version {
    _latest-git-timestamp "$REPO_URL"
}

# This function exits with a zero status code if the first timestamp is more
# recent than the second one, otherwise with a non-zero status code: this
# occurs when the first timestamp is equal or smaller than the second one.
#
# Arguments:
#     - $1: First timestamp.
#     - $2: Second timestamp.
function is-newer {
    _is-newer-timestamp "$1" "$2"
}

# This function uninstalls move-to-monitor
function remove {
    rm "$EXEC"
}

# This function installs move-to-monitor, downloading the sources from the
# repository and running the installation script.
function install {
    local TMP_DIR
    TMP_DIR="$(mktemp -d)"

    git clone "$REPO_URL" "$TMP_DIR"

    bash "$TMP_DIR/install.sh"
    mv /usr/local/bin/move-to-next-monitor "$EXEC"

    rm -rf "$TMP_DIR"
}
