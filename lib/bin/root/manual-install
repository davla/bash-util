#!/usr/bin/env bash

# This script deals with manual installation of applications that aren't
# packaged in any repository. It assumes the machinery for manual installation
# to be installed.
#
# The script installs applications if they are not installed, or if the
# installed version is older than the latest available one. Errors are logged
# in the log directory under the machinery installation path.
#
# Specific applications can be installed by passing their name, that is the
# name of the  *.inst file in the functions.d directory under the machinery
# installation path; other files matching the specifications can be used as
# well, by passing their absolute path. If no applications are provided, all
# the ones found in functions.d are installed.
#
# Arguments:
#   - $@: The applications to be installed, as names or absolute paths.
#       Optional, defaults to all the packages in functions.d. More info above.

#####################################################
#
#                   Variables
#
#####################################################

# Manual installation machinery directories
BASE_MANUAL_DIR='/usr/local/lib/manual-install'
MANUAL_FUNCTIONS_DIR="$BASE_MANUAL_DIR/functions.d"
MANUAL_LOG_DIR="$BASE_MANUAL_DIR/log"

#####################################################
#
#                   Aliases
#
#####################################################

shopt -s expand_aliases

# Echoes normally if from terminal emulator, otherwise uses syslog
tty -s \
    && alias print='echo' \
    || alias print='logger -p local0.info -t MANUAL_INSTALL'

#####################################################
#
#                   Functions
#
#####################################################

# This function executes a command suppressing its STDOUT and redirecting its
# STDERR to a file in the log directory in the machinery installation path.
# If the commands terminates successfully, the log file is removed, otherwise
# a message is printed. Returns the exit code of the command.
#
# Arguments:
#   - $1: The command to be executed.
#   - $2: The application name. Used in the log file name and in the error
#       message.
#   - $3: The action to print in the error message.
function with-log {
    local CMD="$1"
    local APPLICATION="$2"
    local ACTION="$3"

    ERROR_LOG="$MANUAL_LOG_DIR/$APPLICATION-error.log"

    $CMD > /dev/null 2> "$ERROR_LOG"
    EXIT_CODE="$?"
    [[ "$EXIT_CODE" -ne 0 ]] \
        && print "$APPLICATION: errors occurred while $ACTION. See " \
            "$ERROR_LOG for details." \
        || rm "$ERROR_LOG"
    return "$EXIT_CODE"
}

# This function manually installs an application. It does so only if the
# application is not installed at all, or when the installed version is older
# than the available one. In the latter case, the application is removed and
# then the new version is installed from scratch. Errors diring installation
# and removal are logged, while installation checks and version retrieval and
# comparison are not.
#
# Arguments:
#   - $1: The application to be installed.
function manual-install {
    local APPLICATION="$1"

    if ! is-installed &> /dev/null; then
        print "$APPLICATION not installed"
        with-log install "$APPLICATION" 'installing' \
            && print "$APPLICATION version $(installed-version) installed"
    else
        INSTALLED_VERSION="$(installed-version)"
        LATEST_VERSION="$(latest-version)"

        if is-newer "$LATEST_VERSION" "$INSTALLED_VERSION" &> /dev/null; then

            # The || prevents the function from executing any further in case
            # of removal error. The exit code is the remove error code.
            with-log remove "$APPLICATION" 'removing' || return

            with-log install "$APPLICATION" 'installing' \
                && print "Updated package $APPLICATION to $LATEST_VERSION " \
                    "- was $INSTALLED_VERSION"
        else
            print "$APPLICATION is already the latest version " \
                "($INSTALLED_VERSION)"
        fi
    fi
}

#####################################################
#
#               Input processing
#
#####################################################

APPLICATIONS=()

# Application are supplied. Mapping the names to their *inst file in the
# functions.d directory in the machinery installation path, unless they are
# already absolute paths.
if [[ $# -gt 0 ]]; then
    for APPLICATION in "$@"; do
        [[ ! -f "$APPLICATION" ]] \
            && APPLICATION="$MANUAL_FUNCTIONS_DIR/$APPLICATION.inst"
        APPLICATIONS+=("$APPLICATION")
    done

# No applications are passed, just using all files in the functions.d
# directory in the machinery installation path
else
    APPLICATIONS=("$MANUAL_FUNCTIONS_DIR/"*inst)
fi

#####################################################
#
#           Installing applications
#
#####################################################

for APPLICATION in "${APPLICATIONS[@]}"; do
    APPLICATION_NAME="$(basename "$APPLICATION" .inst)"

    # Loading the function definitions for the application
    source "$PACKAGE"

    manual-install "$APPLICATION_NAME"
done
